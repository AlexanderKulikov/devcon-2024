
#Область ПрограммныйИнтерфейс

// Получить заказы на сервере.
// 
// Параметры:
//  ВидЦены - СправочникСсылка.ВидыЦен - Вид цены
Процедура ПолучитьЗаказыНаСервере(ВидЦены) Экспорт
	
	НомерПолученногоСообщения = Константы.ЛКК_НомерПолученногоСообщения.Получить();
	
	ДополнительныйПуть = СтрШаблон("orders?accepted-num=%1", XMLСтрока(НомерПолученногоСообщения));
	
	Ответ = ВыполнитьЗапросGET(ДополнительныйПуть);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение СтрШаблон("Ошибка вызова метода, код состояния: %1", Ответ.КодСостояния)
	КонецЕсли;
	
	ДанныеОтвета = ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());
	
	НачатьТранзакцию();
	
	Попытка
	
		Для Каждого ДанныеЗаказа Из ДанныеОтвета Цикл
			СоздатьЗаказ(ДанныеЗаказа, ВидЦены);
		КонецЦикла;
		
		Константы.ЛКК_НомерПолученногоСообщения.Установить(НомерПолученногоСообщения + 1);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Выгрузить повторно номенклатуру, которая была передана ранее.
Процедура ВыгрузитьПовторноНоменклатуру() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛКК_ВыгруженнаяНоменклатура.Номенклатура
		|ИЗ
		|	РегистрСведений.ЛКК_ВыгруженнаяНоменклатура КАК ЛКК_ВыгруженнаяНоменклатура";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокНоменклатуры = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СписокНоменклатуры.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	
	ОтправитьВыбраннуюНоменклатуру(СписокНоменклатуры);
	
КонецПроцедуры

// Отправить выбранную номенклатуру.
// 
// Параметры:
//  СписокНоменклатуры - Массив из СправочникСсылка.Номенклатура - Список номенклатуры
Процедура ОтправитьВыбраннуюНоменклатуру(СписокНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка КАК Номенклатура,
		|	СправочникНоменклатура.Наименование КАК Наименование,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (&СписокНоменклатуры)
		|		И ВидЦен = &ВидЦены
		|		И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ГДЕ
		|	СправочникНоменклатура.Ссылка В (&СписокНоменклатуры)";
		
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ВидЦены", Константы.ЛКК_ВидЦены.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЗапроса = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеНоменклатуры = Новый Структура;
		ДанныеНоменклатуры.Вставить("Идентификатор", Строка(Выборка.Номенклатура.УникальныйИдентификатор()));
		ДанныеНоменклатуры.Вставить("Наименование", Выборка.Наименование);
		ДанныеНоменклатуры.Вставить("Цена", Выборка.Цена);
		
		ДанныеЗапроса.Добавить(ДанныеНоменклатуры);
		
	КонецЦикла;
	
	ДополнительныйПуть = "goods";
	
	ТелоЗапроса = ЗаписатьЗначениеJSON(ДанныеЗапроса);	
		
	Ответ = ВыполнитьЗапросPOST(ДополнительныйПуть, ТелоЗапроса);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение СтрШаблон("Ошибка вызова метода, код состояния: %1", Ответ.КодСостояния)
	КонецЕсли;
	
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		Запись = РегистрыСведений.ЛКК_ВыгруженнаяНоменклатура.СоздатьМенеджерЗаписи();
		Запись.Номенклатура = Номенклатура;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Добавить контрагента в личный кабинет.
// 
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент
Процедура ДобавитьКонтрагентаВЛичныйКабинет(Контрагент) Экспорт
	
	ДополнительныйПуть = "organizations";
	
	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Наименование");
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("Идентификатор", Строка(Контрагент.УникальныйИдентификатор()));
	ДанныеЗапроса.Вставить("Наименование", Наименование);
	
	ТелоЗапроса = ЗаписатьЗначениеJSON(ДанныеЗапроса);	
		
	Ответ = ВыполнитьЗапросPOST(ДополнительныйПуть, ТелоЗапроса);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение СтрШаблон("Ошибка вызова метода, код состояния: %1", Ответ.КодСостояния)
	КонецЕсли;
	
	Запись = РегистрыСведений.ЛКК_ВыгруженныеКонтрагенты.СоздатьМенеджерЗаписи();
	Запись.Контрагент = Контрагент;
	Запись.Записать();
	
КонецПроцедуры

// Добавить представителя в личный кабинет.
// 
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент
//  НастройкиСоздания - Структура - Настройки создания:
//  	* КонтактноеЛицо - СправочникСсылка.КонтактныеЛица
//  	* Пароль - Строка
//
Процедура ДобавитьПредставителяВЛичныйКабинет(Контрагент, НастройкиСоздания) Экспорт
	
	ДополнительныйПуть = "persons";
	
	КонтактноеЛицо = НастройкиСоздания.КонтактноеЛицо;
	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "Наименование");
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо,,, Ложь);
	
	АдресЭлектроннойПочты = "";
	Телефон = "";
	
	Для Каждого Строка Из КонтактнаяИнформация Цикл
		Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
			АдресЭлектроннойПочты = Строка.Представление;
		ИначеЕсли Строка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица Тогда
			Телефон = Строка.Представление;
		КонецЕсли;		
	КонецЦикла;
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		ОбщегоНазначения.СообщитьПользователю("У представителя должен быть заполнен адрес электронной почты",,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Телефон) Тогда
		ОбщегоНазначения.СообщитьПользователю("У представителя должен быть заполнен телефон",,,, Отказ);
	КонецЕсли;
	
	Телефон = "+" + СтрЗаменитьПоРегулярномуВыражению(Телефон, "[^0-9]", "");
	
	Если СтрДлина(Телефон) <> 12 Тогда
		ОбщегоНазначения.СообщитьПользователю("Некорректный номер телефона у выбранного представителя",,,, Отказ);
	КонецЕсли;		
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.ЛКК_ВыгруженныеКонтактныеЛица.СоздатьМенеджерЗаписи();
	Запись.КонтактноеЛицо = КонтактноеЛицо;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("Идентификатор", Строка(КонтактноеЛицо.УникальныйИдентификатор()));
	ДанныеЗапроса.Вставить("Наименование", Наименование);
	ДанныеЗапроса.Вставить("Организация", Строка(Контрагент.УникальныйИдентификатор()));
	ДанныеЗапроса.Вставить("Телефон", Телефон);
	ДанныеЗапроса.Вставить("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
	ДанныеЗапроса.Вставить("Пароль", НастройкиСоздания.Пароль);	
	
	ТелоЗапроса = ЗаписатьЗначениеJSON(ДанныеЗапроса);	
		
	Ответ = ВыполнитьЗапросPOST(ДополнительныйПуть, ТелоЗапроса);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение СтрШаблон("Ошибка вызова метода, код состояния: %1", Ответ.КодСостояния)
	КонецЕсли;
	
	Запись = РегистрыСведений.ЛКК_ВыгруженныеКонтактныеЛица.СоздатьМенеджерЗаписи();
	Запись.КонтактноеЛицо = КонтактноеЛицо;
	Запись.Записать();
	
КонецПроцедуры

// Проверить подключение.
// 
// Возвращаемое значение:
//  Строка - Результат проверки подключения
Функция ПроверитьПодключение() Экспорт
	
	ДополнительныйПуть = "ping";
	
	Ответ = ВыполнитьЗапросGET(ДополнительныйПуть, Ложь);
	
	Если Ответ.КодСостояния = 200 Тогда
		Возврат "Соединение проверено успешно";
	Иначе
		Возврат СтрШаблон("Ошибка проверки соединения, код состояния: %1", Ответ.КодСостояния);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЗаказ(ДанныеЗаказа, ВидЦены)
	
	ДокументСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ДанныеЗаказа.Идентификатор));
	
	// Для упрощения повторно документы не загружаем
	Если ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Общий алгоритм приведен для примера, для промышленной эксплуатации требуется доработка	
	ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
	ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	ДокументОбъект.Организация = Справочники.Организации.ОсновнаяОрганизация;
	
	Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗаказа.Организация));	
	Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	
	ДокументОбъект.Контрагент = Контрагент;
	ДокументОбъект.Договор = Договор;
	ДокументОбъект.КонтактноеЛицоПодписант = 
		Справочники.КонтактныеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗаказа.Представитель));
	
	ДокументОбъект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ДокументОбъект.Организация, , ДокументОбъект.Дата);
	
	ДокументОбъект.Комментарий = ДанныеЗаказа.Комментарий;
	
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Заполнить(Неопределено);
	
	ДокументОбъект.ВалютаДокумента = Константы.ВалютаУчета.Получить();
	
	Отбор = Новый Структура("Валюта", ДокументОбъект.ВалютаДокумента);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДатаСеанса(), Отбор);
	
	ДокументОбъект.Курс = СтруктураПоВалюте.Курс;
	ДокументОбъект.Кратность = СтруктураПоВалюте.Кратность;
	
	ДокументОбъект.ВидЦен = ВидЦены;
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.БанковскийСчет = ДокументОбъект.Организация.БанковскийСчетПоУмолчанию;
		ДокументОбъект.Касса = ДокументОбъект.Организация.КассаПоУмолчанию;
	КонецЕсли;
	
	ДокументОбъект.ДатаОтгрузки = ТекущаяДатаСеанса() + 86400 * 10; 
	
	Для Каждого ОписаниеСтроки Из ДанныеЗаказа.СписокНоменклатуры Цикл
		Номенклатура = 
			Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ОписаниеСтроки.Номенклатура));
		НоваяСтрока = ДокументОбъект.Запасы.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Количество = ОписаниеСтроки.Количество;
		НоваяСтрока.Цена = ОписаниеСтроки.Цена;
		НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Номенклатура.ВидСтавкиНДС);
		НоваяСтрока.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
		ПересчитатьСтрокуТабличнойЧасти(НоваяСтрока, ДокументОбъект);
	КонецЦикла;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Запись = РегистрыСведений.ЛКК_ЗагруженныеЗаказы.СоздатьМенеджерЗаписи();
	Запись.Заказ = ДокументОбъект.Ссылка;
	Запись.Записать();	
	
КонецПроцедуры

Процедура ПересчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, Документ)
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена)
		И ЗначениеЗаполнено(Документ.ВидЦен) Тогда
		
		СтруктураДанные = Новый Структура;
		
		СтруктураДанные.Вставить("ДатаОбработки", Документ.Дата);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", Неопределено);
		СтруктураДанные.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Документ.СуммаВключаетНДС);
		СтруктураДанные.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("ВидЦен", Документ.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Документ.ВидСкидкиНаценки);

		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Документ, СтрокаТабличнойЧасти, СтруктураДанные);

		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Цена;
		
	КонецЕсли;
	
	СуммаБезСкидки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	СуммаСкидки = СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма;
	
	Если СуммаСкидки <> 0 Тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 * СуммаСкидки / СуммаБезСкидки;
	КонецЕсли;
	
	РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ);
	
КонецПроцедуры

Процедура РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ)
	
	Если Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
		СтрокаТабличнойЧасти.СуммаНДС = ?(Документ.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

Функция НастройкиПодключения()
	
	Адрес = Константы.ЛКК_АдресЛичногоКабинета.Получить();
	
	Результат = НовыеНастройкиПодключения();
	
	Если СтрНачинаетсяС(Адрес, "https") Тогда
		Результат.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение()
	КонецЕсли;
	
	АдресБезПротокола = Сред(Адрес, СтрНайти(Адрес, "://") + 3);
	
	Результат.АдресСервера = Лев(АдресБезПротокола, СтрНайти(АдресБезПротокола, "/") - 1);
	Результат.ПутьНаСервере = Сред(АдресБезПротокола, СтрНайти(АдресБезПротокола, "/"));
	
	Возврат Результат;	
	
КонецФункции

// Новые настройки подключения.
// 
// Возвращаемое значение:
//  Структура - Новые настройки подключения:
// * АдресСервера - Строка
// * ПутьНаСервере - Строка
// * ЗащищенноеСоединение - Неопределено
// 
Функция НовыеНастройкиПодключения()
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервера", "");
	Результат.Вставить("ПутьНаСервере", "");
	Результат.Вставить("ЗащищенноеСоединение", Неопределено);
	
	Возврат Результат	
	
КонецФункции

// Новое соединение.
// 
// Параметры:
//  НастройкиПодключения - см. НовыеНастройкиПодключения
//  Логин - Строка
//  Пароль - Строка
// 
// Возвращаемое значение:
//  HTTPСоединение - Новое соединение с указанными настройками
Функция НовоеСоединение(НастройкиПодключения, Логин = "", Пароль = "")
	
	Возврат Новый HTTPСоединение(
		НастройкиПодключения.АдресСервера,,
		Логин, 
		Пароль,, 
		5, 
		НастройкиПодключения.ЗащищенноеСоединение);
	
КонецФункции

// Выполнить запрос GET.
// 
// Параметры:
//  Соединение - HTTPСоединение - Соединение
//  НастройкиПодключения - см. НовыеНастройкиПодключения
//  ДополнительныйПуть - Строка
//  ТребуетсяАутентификация - Булево - Требуется аутентификация
// 
// Возвращаемое значение:
//  HTTPОтвет - Ответ сервера
Функция ВыполнитьЗапросGET(ДополнительныйПуть, ТребуетсяАутентификация = Истина)
	
	НастройкиПодключения = НастройкиПодключения();	
	Соединение = НовоеСоединение(НастройкиПодключения);
	
	ШаблонАдреса = "%1/api/sbm/%2";
	Адрес = СтрШаблон(ШаблонАдреса, НастройкиПодключения.ПутьНаСервере, ДополнительныйПуть);
	
	Заголовки = Новый Соответствие;
	
	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);
	
	Возврат Соединение.Получить(Запрос);
	
КонецФункции

// Выполнить запрос POST.
// 
// Параметры:
//  Соединение - HTTPСоединение - Соединение
//  НастройкиПодключения - см. НовыеНастройкиПодключения
//  ДополнительныйПуть - Строка
//  Тело - Строка
// 
// Возвращаемое значение:
//  HTTPОтвет - Ответ сервера
Функция ВыполнитьЗапросPOST(ДополнительныйПуть, Тело)
	
	НастройкиПодключения = НастройкиПодключения();	
	Соединение = НовоеСоединение(НастройкиПодключения);
	
	ШаблонАдреса = "%1/api/sbm/%2";
	Адрес = СтрШаблон(ШаблонАдреса, НастройкиПодключения.ПутьНаСервере, ДополнительныйПуть);
	
	Токен = Токен(НастройкиПодключения);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Запрос.УстановитьТелоИзСтроки(Тело);
	
	Возврат Соединение.ВызватьHTTPМетод("POST", Запрос);
	
КонецФункции

Функция Токен(НастройкиПодключения)
	
	ШаблонАдреса = "%1/sys/token";
	Адрес = СтрШаблон(ШаблонАдреса, НастройкиПодключения.ПутьНаСервере);
	
	Логин = Константы.ЛКК_ИдентификаторСлужебногоПользователя.Получить();
	Пароль = Константы.ЛКК_СекретСлужебногоПользователя.Получить();
	
	Соединение = НовоеСоединение(НастройкиПодключения, Логин, Пароль);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	ТелоЗапроса = "grant_type=CLIENT_CREDENTIALS";
	
	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение СтрШаблон("Ошибка получения токена, код состояния: %1", Ответ.КодСостояния)
	КонецЕсли;
			
	ДанныеОтвета = ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());
	
	Возврат ДанныеОтвета.id_token;
	
КонецФункции

#КонецОбласти